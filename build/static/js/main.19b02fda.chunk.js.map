{"version":3,"sources":["App.js","serviceWorker.js","components/Photos.js","components/Course.js","components/CoursesList.js","index.js"],"names":["App","react_default","a","createElement","Component","Boolean","window","location","hostname","match","Photos","Course","props","console","log","course","Card","CardMedia","style","height","paddingTop","image","fields","file","url","title","CardContent","Typography","gutterBottom","variant","component","description","CardActions","Button","size","color","href","target","client","contentful","space","accessToken","CoursesList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","searchString","getCourses","getEntries","content_type","query","then","response","setState","items","catch","error","onSearchInputChange","event","value","TextField","padding","id","placeholder","margin","onChange","Grid","container","spacing","map","currentCourse","key","item","xs","sm","lg","xl","components_Course","routing","react_router_dom","to","react_router","exact","path","ReactDOM","render","document","getElementById","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19b02fda.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\n\nclass Photos extends Component {\n  render() {\n    return <h1>Photos</h1>\n  }\n}\nexport default Photos","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\n\nconst Course = (props) => {\n  console.log(props) \n  return (\n    <div>\n      {\n        props.course ? (\n          <Card>\n            <CardMedia \n              style={{ height: 0, paddingTop: '56.25%' }}\n              image={props.course.fields.image.fields.file.url}\n              title={props.course.fields.title}\n            />\n            <CardContent>\n              <Typography gutterBottom variant='h5' component='h2'>\n                {props.course.fields.title}\n              </Typography>\n              <Typography component='p'>\n                {props.course.fields.description}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button\n                size='small'\n                color='primary'\n                href={props.course.fields.url}\n                target=\"_blank\"\n              >\n                Go To Course\n              </Button>\n            </CardActions>\n          </Card>\n        ) : null\n      }\n    </div>\n  )\n}\n\nexport default Course","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport * as contentful from 'contentful'\nimport Course from '../components/Course'\n\nconst SPACE_ID = '0n4m3j6h6sxd'\nconst ACCESS_TOKEN = 'Cy3dY7iQ1ijgrQWghyIta5uJ0B8HKJXIIE_KDjNN0cA'\n\nconst client = contentful.createClient({\n  space: SPACE_ID,\n  accessToken: ACCESS_TOKEN\n});\n\nclass CoursesList extends Component {\n  constructor(props) {\n    super(props)\n    this.getCourses()\n  }\n\n  state = {\n    courses: [],\n    searchString: ''\n  }\n\n  getCourses = () => {\n    client.getEntries({\n      content_type: 'course',\n      query: this.state.searchString\n    })\n    .then((response) => {\n      this.setState({ courses: response.items })\n      console.log(this.state.courses)\n    })\n    .catch((error) => {\n      console.log('Error occured while fetching entries')\n      console.log(error)\n    })\n  }\n\n  onSearchInputChange = (event) => {\n    console.log(\"Search changed ...\" + event.target.value)\n    if(event.target.value) {\n      this.setState({ searchString: event.target.value })\n    } else {\n      this.setState({ searchString: '' })\n    }\n    this.getCourses()\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.courses ? (\n            <div>\n              <TextField \n                style={{ padding: 24}}\n                id='searchInput'\n                placeholder='Search for Courses'\n                margin='normal'\n                onChange={this.onSearchInputChange}\n              />\n              <Grid\n                container\n                spacing={5}\n                style={{ padding: 24 }}\n              >\n                {\n                  this.state.courses.map((currentCourse, id) => (\n                    <Grid\n                    key={id}\n                    item\n                    xs={12}\n                    sm={6}\n                    lg={4}\n                    xl={3}\n                    >\n                      <Course course={currentCourse} />\n                    </Grid>\n                  ))\n                }\n              </Grid>\n            </div>\n          ) : 'No courses found'\n        }\n      </div>\n    )\n  }\n}\n\nexport default CoursesList;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport Photos from './components/Photos';\nimport CoursesList from './components/CoursesList';\n\nconst routing = (\n  <Router>\n    <div>\n      <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/photos\">Photos</Link>\n          </li>\n          <li>\n            <Link to=\"/courses-list\">CoursesList</Link>\n          </li>\n      </ul>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/photos\" component={Photos} />\n      <Route path=\"/courses-list\" component={CoursesList} />\n    </div>\n  </Router>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}